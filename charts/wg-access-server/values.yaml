# wg-access-server config
config:
  # The global log level
  logLevel: info
  # Turn off collection of device metadata logging. Includes last handshake time and RX/TX bytes only.
  disableMetadata: false
  # Enable/Disable the automatic deletion of inactive devices.
  enableInactiveDeviceDeletion: false
  # The duration after which inactive devices are automatically deleted, if automatic deletion is enabled. A device is inactive if it has not been connected to the server for longer than the inactive device grace period. The duration format is the go duration string format
  inactiveDeviceGracePeriod: 8760h
  # Change the name of the configuration file the user can download (Do not include the '.conf' extension )
  filename: WireGuard
  dns:
    # Enable/disable the embedded DNS proxy server. This is enabled by default and allows VPN clients to avoid DNS leaks by sending all DNS requests to wg-access-server itself.
    enabled: true
    # The upstream DNS servers to proxy DNS requests to. By default the host machine's resolveconf configuration is used to find its upstream DNS server, with a fallback to Cloudflare.
    # upstream: resolvconf
    # A domain to serve configured devices authoritatively. Queries for names in the format .. will be answered with the device's IP addresses.
    domain:
  wireguard:
    # Enable/disable the wireguard server. Useful for development on non-linux machines.
    enabled: true
    # The wireguard network interface name
    interface: wg0
    # The maximum transmission unit (MTU) to be used on the server-side interface.
    mtu: 1420
  vpn:
    # The VPN IPv4 network range. VPN clients will be assigned IP addresses in this range. Set to 0 to disable IPv4.
    cidr: 10.44.0.0/24
    # IPv6 is disabled by default, since it leads to the pod failing if the k8s-cluster is not configured with IPv6 support
    cidrv6: 0
    # Disables NAT for IPv4
    nat44: true
    # Disables NAT for IPv6
    nat66: true
    # BLock or allow traffic between client devices (client isolation)
    clientIsolation: false
    # The VPN gateway interface. VPN client traffic will be forwarded to this interface.
    # gatewayInterface: default gateway interface (e.g. eth0)
    # Allowed IPs that clients may route through this VPN. This will be set in the client's WireGuard connection file and routing is also enforced by the server using iptables.
    allowedIPs:
      - "0.0.0.0/0"
      - "::/0"
  clientConfig:
    dnsServers:
      - ""
    dnsSearchDomain: ""
    mtu: ""

secretConfig:
  config: {}
  existingSecret:
  secretRefKeys:
    config: "secretConfig"


web:
  config:
    existingSecret:
    secretRefKeys:
      adminUsername: "adminUsername"
      adminPassword: "adminPassword"
    adminUsername: "admin"
    adminPassword: "admin"
    basicAuthEnabled: true
  service:
    annotations: {}
    externalTrafficPolicy: ""
    type: ClusterIP
    loadBalancerIP: ""

wireguard:
  config:
    existingSecret:
    secretRefKeys:
      privateKey: "privateKey"
    # PrivateKey must be changed before running this in a production environment.
    privateKey: "qJvFeHHuffBaPWx4veJGQqXw6j5zdo5cSOaBd1Z0Km4="
  service:
    annotations: {}
    type: ClusterIP
    sessionAffinity: ClientIP
    externalTrafficPolicy: ""
    ipFamilyPolicy: SingleStack
    loadBalancerIP: ""
    externalIPs: []
    port: 51820
    nodePort:

storage:
  enabled: false
  uri: ""
  # existingSecret: ""
  secretRefKeys:
    uri: "storageUri"

persistence:
  enabled: false
  existingClaim: ""
  annotations: {}
  accessModes:
    - ReadWriteOnce

  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  size: 100Mi

initContainers: []

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ingressClassName: ""
  hosts: []
    # - vpn.example.com
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

extraVolumes: ""

extraVolumeMounts: ""

nameOverride: ""

fullnameOverride:

# use the host network for the application pod. Set to "true" if you want the
# underlying K8S network to be reachable via the VPN.
# hostNetwork: false

imagePullSecrets: []

image:
  repository: ghcr.io/freifunkmuc/wg-access-server
  tag: ""
  pullPolicy: IfNotPresent

# multiple replicas is only supported when using
# a supported highly-available storage backend (i.e. postgresql)
replicas: 1

strategy:
  type: ""
  # the deployment strategy type will default to "Recreate" when persistence is enabled
  # or "RollingUpdate" when persistence is not enabled.
  # type: Recreate

# set securityContext for the application pod. With some kernel versions, adding the
# 'NET_RAW' capability might be required for the iptables table to be initialized.
securityContext:
  capabilities:
    add: ['NET_ADMIN']

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
